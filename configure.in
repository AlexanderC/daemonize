dnl ---------------------------------------------------------------------------
dnl Autoconf file for daemonize
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
dnl $Id$
dnl ---------------------------------------------------------------------------

AC_INIT(daemonize.c)
AC_CONFIG_HEADER(config.h)

dnl ---------------------------------------------------------------------------
dnl Directories and package-specific vars
dnl ---------------------------------------------------------------------------

LOCAL_TOP_LEVEL=`pwd`

dnl ---------------------------------------------------------------------------
dnl Compiler- and language-specific programs.  Must precede the UNIX tests.
dnl ---------------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP

AC_SUBST(CC)
AC_SUBST(CPP)

dnl ---------------------------------------------------------------------------
dnl UNIX variant hacks
dnl ---------------------------------------------------------------------------

AC_AIX

dnl ---------------------------------------------------------------------------
dnl Checks for programs via standard macros.
dnl ---------------------------------------------------------------------------

AC_PROG_INSTALL

dnl ---------------------------------------------------------------------------
dnl Checks for header files.
dnl ---------------------------------------------------------------------------

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(errno.h)

export CPPFLAGS

dnl ---------------------------------------------------------------------------
dnl Checks for libraries.
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ---------------------------------------------------------------------------

AC_C_CONST

AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

AC_CHECK_TYPE(ssize_t, int)

dnl ***
dnl FreeBSD and some others define "sig_t" as the return type for a signal
dnl handler.  Use it if it's there; #define it otherwise.

AC_CACHE_CHECK([for 'sig_t' typedef], local_cv_have_sig_t,
	       AC_EGREP_HEADER(sig_t, signal.h, 
			       local_cv_have_sig_t=yes,
			       local_cv_have_sig_t=no))
if test "$local_cv_have_sig_t" = "yes" ; then
    AC_DEFINE(HAVE_SIG_T)
fi

dnl ***
dnl Password file stuff

AC_CACHE_CHECK([for 'struct passwd'], local_cv_have_struct_pw, 
	       AC_TRY_COMPILE([#include <pwd.h>], 
			      [struct passwd *pw;],
	                      local_cv_have_struct_pw=yes,
			      local_cv_have_struct_pw=no))
if test "$local_cv_have_struct_pw" = "no" ; then
    AC_MSG_ERROR([Sorry, but I need 'struct passwd'.])
else
dnl pw_comment or pw_gecos? Neither is required by X/Open or POSIX.

    AC_CACHE_CHECK([for 'pw_comment' field], wclib_cv_have_pw_comment,
		   AC_TRY_COMPILE([#include <pwd.h>],
				  [struct passwd *pw;
				   char *s = (char *) pw->pw_comment;],
				  wclib_cv_have_pw_comment=yes,
				  wclib_cv_have_pw_comment=no))

    AC_CACHE_CHECK([for 'pw_gecos' field], wclib_cv_have_pw_gecos,
		   AC_TRY_COMPILE([#include <pwd.h>],
				  [struct passwd *pw;
				   char *s = (char *) pw->pw_gecos;],
				  wclib_cv_have_pw_gecos=yes,
				  wclib_cv_have_pw_gecos=no))

    if test "$wclib_cv_have_pw_comment" = "yes" ; then
	AC_DEFINE(HAVE_PW_COMMENT)
    fi
    if test "$wclib_cv_have_pw_gecos" = "yes" ; then
	AC_DEFINE(HAVE_PW_GECOS)
    fi
fi


dnl ***
dnl Predefined `bool' type and various related constants

AC_CACHE_CHECK([for predefined 'bool' type], local_cv_have_bool,
	       AC_TRY_COMPILE([
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>],
			      [bool flag;],
                              local_cv_have_bool=yes,
                              local_cv_have_bool=no))
if test "$local_cv_have_bool" = "no" ; then
    AC_DEFINE(bool, short)
fi

dnl ***
dnl TRUE?

AC_CACHE_CHECK([for TRUE constant in standard headers], local_cv_have_true,
	       AC_TRY_COMPILE([
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>],
			      [if (TRUE) ;],
			      local_cv_have_true=yes,
			      local_cv_have_true=no))
if test "$local_cv_have_true" = "yes" ; then
    AC_DEFINE(HAVE_TRUE)
fi

dnl ***
dnl FALSE?

AC_CACHE_CHECK([for FALSE constant in standard headers], local_cv_have_false,
	       AC_TRY_COMPILE([
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>],
			      [if (FALSE) ;],
			      local_cv_have_false=yes,
			      local_cv_have_false=no))
if test "$local_cv_have_false" = "yes" ; then
    AC_DEFINE(HAVE_FALSE)
fi

dnl ***
dnl Predefined `byte' type

AC_CACHE_CHECK([for predefined 'byte' type], local_cv_have_byte,
	       AC_TRY_COMPILE([
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>],
			      [byte b;],
			      local_cv_have_byte=yes,
			      local_cv_have_byte=no))

if test "$local_cv_have_byte" = "yes" ; then
    AC_DEFINE(HAVE_BYTE_TYPE)
fi

dnl ---------------------------------------------------------------------------
dnl Checks for library functions.
dnl ---------------------------------------------------------------------------

AC_CHECK_FUNC(getpgrp, AC_DEFINE(HAVE_GETPGRP))
AC_CHECK_FUNC(setpgrp, AC_DEFINE(HAVE_SETPGRP))

dnl setsid(2) appears to be defined for all reasonable (and some unreasonable)
dnl Unices.  Hell, even the Single Unix Specification (formerly X/Open, see
dnl `http://www.rdg.opengroup.org/onlinepubs/7908799/toc.htm') has it.
dnl If it isn't there, we define a macro that fails.

AC_CHECK_FUNC(setsid, AC_DEFINE(HAVE_SETSID))

dnl AC_FUNC_GETPGRP defines GETPGRP_VOID if getpgrp() takes no parameters.
AC_FUNC_GETPGRP

AC_FUNC_SETPGRP
AC_FUNC_VPRINTF
AC_CHECK_FUNC(vfork, AC_DEFINE(HAVE_VFORK))
AC_FUNC_VFORK

dnl ***
dnl Generate a list of missing functions that we desperately require.
dnl Any missing functions, below, will be replaced with emulators if 
dnl necessary; the value of RUNAS_MISSING_SOURCES will be substituted into
dnl the "portability" Makefile.
dnl
dnl NOTE: AC_FUNC_MEMCMP adds 'memcmp.o' to LIBOBJS if the test fails.
dnl So, we start out by editing that macro.

AC_CHECK_FUNC(strerror, AC_DEFINE(HAVE_STRERROR),
	      LOCAL_MISSING_SOURCES="${LOCAL_MISSING_SOURCES} strerror.c")
AC_CHECK_FUNC(getopt, AC_DEFINE(HAVE_GETOPT),
	      LOCAL_MISSING_SOURCES="${LOCAL_MISSING_SOURCES} getopt.c")

dnl daemon(3) is found mostly on BSD 4.4Lite-derived systems.  Linux does not 
dnl appear to have it; nor does Solaris, HP/UX or AIX. If it's missing, we
dnl supply our own emulation version.

AC_CHECK_FUNC(daemon, AC_DEFINE(HAVE_DAEMON),
	      LOCAL_MISSING_SOURCES="${LOCAL_MISSING_SOURCES} daemon.c")

AC_SUBST(LOCAL_MISSING_SOURCES)

dnl ---------------------------------------------------------------------------
dnl System services
dnl ---------------------------------------------------------------------------

AC_SYS_LONG_FILE_NAMES

dnl ---------------------------------------------------------------------------
dnl Final configuration constants that depend on the previous stuff.
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl Output and variable substitutions
dnl ---------------------------------------------------------------------------

dnl ***
dnl Individual Makefiles

AC_OUTPUT(Makefile)

dnl ---------------------------------------------------------------------------
dnl Copyrights and such
dnl ---------------------------------------------------------------------------

echo ""
echo "***"
echo "*** Please be sure to read the LICENSE file, in this directory."
echo "***"
echo ""
